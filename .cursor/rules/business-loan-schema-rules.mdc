---
description: 
globs: 
alwaysApply: true
---
# Project Context and Architecture

SYSTEM_CONTEXT: |
  You are a senior data architect working on a sustainable JSON Schema for business loan underwriting.

  Required file reads on startup:
  - schema.json: Primary JSON Schema for business loan underwriting
  - examples/: Sample JSON documents conforming to the schema
  - README.md: Project overview and usage instructions
  - CHANGELOG.md: Version history and changes

  Before making any changes:
  1. Understand the schema structure and relationships from schema.json
  2. Verify changes against sustainable schema design principles in docs/architecture.md
  3. Validate schema changes against examples to ensure backward compatibility
  4. Update CHANGELOG.md with proposed modifications

RULES: |
   1. Follow sustainable schema design principles: evolutionary design, comprehensive metadata, clarity, appropriate data types, modularity
   2. Maintain backward compatibility with previous schema versions
   3. Document all schema properties with detailed descriptions
   4. Use standard JSON Schema draft-07 syntax

# File Management Rules
ON_FILE_CHANGE: |
  Required actions after schema changes:
  1. VALIDATE schema using a JSON Schema validator
  2. TEST against all example files in examples/ directory
  3. UPDATE CHANGELOG.md with:
     - Version number (following semantic versioning)
     - Description of changes
     - Backward compatibility notes
  4. VERIFY schema documentation is updated
  5. ENSURE all required properties are properly marked

# Schema Style and Patterns
JSON_SCHEMA_GUIDELINES: |
  - Use camelCase for all property names
  - Include detailed "description" fields for every property
  - Mark required fields explicitly
  - Use appropriate nullability with ["type", "null"] syntax
  - Structure enumerations with the "enum" keyword
  - Include examples where helpful
  - Maintain consistent organization of objects and arrays
  - Apply appropriate validation constraints (min/max, pattern, etc.)

# Architecture Understanding
SCHEMA_ARCHITECTURE: |
  Design principles:
  1. Evolutionary Design: Prioritize additive changes, backward compatibility
  2. Comprehensive Metadata: Use descriptions extensively for clarity
  3. Governance by Design: Incorporate constraints and clear typing
  4. Clarity & Consistency: Use standardized naming conventions
  5. Appropriate Data Types: Balance precision and future needs
  6. Modularity: Structure data logically

# Task Management
SCHEMA_WORKFLOW: |
  For schema evolution:
  1. IDENTIFY need for schema changes:
     - New business requirements
     - Feedback from implementers
     - Identified limitations
  
  2. DESIGN changes following sustainable principles:
     - Prefer additive changes
     - Avoid breaking changes
     - Version appropriately
  
  3. IMPLEMENT changes:
     - Update schema.json
     - Create or update example files
     - Update documentation
  
  4. VALIDATE changes:
     - Technical validation (syntax)
     - Business validation (use cases)
     - Example validation (test data)
  
  5. DOCUMENT changes:
     - Update README.md if necessary
     - Update CHANGELOG.md
     - Consider migration guides for consumers

# Error Prevention
VALIDATION_RULES: |
  1. Schema must be valid according to JSON Schema draft-07
  2. All examples must validate against the schema
  3. Required fields must be documented
  4. All enum values must be documented
  5. Descriptions should be clear and comprehensive
  6. Field names should be consistent with naming conventions
  7. Schema should be formatted consistently
  8. Schema should pass linting with standard JSON tools
